# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
  backendrg: 'backend-rg'
  backendsa: 'backendbsa'
  backendcontainer: 'backend-container'
  backendkey: 'devpipeline.terraform.tfstate'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: files_list
    jobs:
     - job: files_list
       steps:
       - task: Bash@3
         inputs:
           targetType: 'inline'
           script: 'ls'

  # - stage: delete_cached_files
  #   jobs:
  #    - job: delete_cached_files
  #      steps:
  #      - task: Bash@3
  #        displayName: search and delete the cached terraform files
  #        inputs:
  #          targetType: 'inline'
  #          script: 'find . -name .terraform.lock.hcl -exec rm -rf {} \;'
  #          workingDirectory: 'Terraform/'

  - stage: tfvalidate
    jobs:
     - job: validate
       continueOnError: false
       steps:
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: 'Terraform/'
            backendServiceArm: 'a-svc'
            backendAzureRmResourceGroupName: '$(backendrg)'
            backendAzureRmStorageAccountName: '$(backendsa)'
            backendAzureRmContainerName: '$(backendcontainer)'
            backendAzureRmKey: '$(backendkey)'

        - task: TerraformTaskV4@4
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: 'Terraform/'

  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: 'Terraform/'
            backendServiceArm: 'a-svc'
            backendAzureRmResourceGroupName: '$(backendrg)'
            backendAzureRmStorageAccountName: '$(backendsa)'
            backendAzureRmContainerName: '$(backendcontainer)'
            backendAzureRmKey: '$(backendkey)'

        - task: TerraformTaskV4@4
          displayName: plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: 'Terraform/'
            environmentServiceNameAzureRM: 'a-svc'

        - task: TerraformTaskV4@4
          displayName: apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: 'Terraform/'
            environmentServiceNameAzureRM: 'a-svc'

  # - stage: buildstage
  #   jobs:
  #   - job: buildjob
  #     displayName: 'BUILD STAGE'
  #     steps:
  #       - template: ../templates/azure-pipelines-dockerjobs.yml
